{
  "hash": "e8f2de94ebe02a20704e9ad8607c63a5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Version Control with Git in R\"\nsubtitle: \"Introduction to using version control in RStudio with Git\"\nauthor: \"Corey Voller\"\ndate: \"2024-02-28\"\ncategories: [R, Git, Version Control]\nimage: \"github_resized.png\"\nbibliography: references.bib\ntoc: true\ntoc-expand: 3\nnumber-sections: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Introduction: The need for version control\n\nA key requirement set out by regulators is to have a system which can modify, maintain, archive, retrieve and transmit clinical trial data. Furthermore, to ensure data integrity and reduce the risk of fraudulent activity, it is important to have an audit trail to document proof of events, procedures and that changes have been made by authorised users only. An audit trail allows for a time-stamped electronic record which can reconstruct a sequence of events. Showing the stages of modification and deletion of data. Now, even bodies such as the FDA do not seem to particularly care what software you conduct your work on as long as all your affairs are in order.\n\n::: {.callout-important .card .text-white .bg-secondary .mb-3 appearance=\"minimal\"}\n## Note\n\n\"FDA does not require use of any specific software for statistical analyses, and statistical software is not explicitly discussed in Title 21 of the Code of Federal Regulations \\[e.g., in 21CFR part 11\\]. However, the software package(s) used for statistical analyses should be fully documented in the submission, including version and build identification.\"\n:::\n\nWhilst SAS is still used by many (and I *really* did try to like it but...), increasingly R is being implemented in the world of clinical trials. Its freely available, open-source nature means that it not only reduces operational costs but sees continuous developments for new packages and documentation as an expanding community of people create innovative ideas. However, where SAS has an advantage is in their proven statistical functions/software which makes version controlling slightly easier than open-sourced R.\n\n# Things you need to get started\n\n-   Git Download: [Git](https://git-scm.com/downloads)\n\n-   R download & RStudio: [R/RStudio](https://posit.co/download/rstudio-desktop/)\n\n# Git\n\nIf you do not have it, install [git](https://git-scm.com/).\n\n## Huh? Git, GitHub, Git Desktop, Git Bash and other GUI's explained\n\n-   Git: This is the actual version control program itself.\n\n-   GitHub: A website where you can store your code and files, also known as a 'repository' or 'repo' for short. This can be a useful home for codes, where you can fork/clone repositories onto different machines easily as well as collaborate and create teams. A way of thinking about it is git creates a book. You can then place a copy of this book on a shelf in a library, aka GitHub.\n\n-   Git Desktop: A graphical user interface (GUI) for git/github. It is more beginner friendly than your cmd counterpart and you can simply drag and drop repo's to add it to the desktop\n\n-   Git Bash: An interface with git functionality and unix commands. Unix shell is used in most linux distributions so if you're using linux, using Git Bash might feel straight forward. It offers greater flexibility for more complicated procedures.\n\n-   Other: Git Kraken, Fork, Sublime merge are different GUI tools with their advantages and disadvantages...and pricey but worth researching and considering.\n\n## Summary of basic Git Commands\n\n\n\n\n::: {.cell tbl-cap='Quick summary of commands'}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"sgpeybvhqm\" class=\".gt_table\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#sgpeybvhqm table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#sgpeybvhqm thead, #sgpeybvhqm tbody, #sgpeybvhqm tfoot, #sgpeybvhqm tr, #sgpeybvhqm td, #sgpeybvhqm th {\n  border-style: none;\n}\n\n#sgpeybvhqm p {\n  margin: 0;\n  padding: 0;\n}\n\n#sgpeybvhqm .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #FFFFFF;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #2E3440;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#sgpeybvhqm .gt_title {\n  color: #FFFFFF;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #2E3440;\n  border-bottom-width: 0;\n}\n\n#sgpeybvhqm .gt_subtitle {\n  color: #FFFFFF;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #2E3440;\n  border-top-width: 0;\n}\n\n#sgpeybvhqm .gt_heading {\n  background-color: #2E3440;\n  text-align: center;\n  border-bottom-color: #2E3440;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #2E3440;\n  font-size: 10px;\n  font-weight: bold;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#sgpeybvhqm .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #2E3440;\n  font-size: 10px;\n  font-weight: bold;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#sgpeybvhqm .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#sgpeybvhqm .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#sgpeybvhqm .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#sgpeybvhqm .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#sgpeybvhqm .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #FFFFFF;\n  background-color: #2E3440;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#sgpeybvhqm .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #FFFFFF;\n  background-color: #2E3440;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sgpeybvhqm .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#sgpeybvhqm .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#sgpeybvhqm .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#sgpeybvhqm .gt_stub {\n  color: #FFFFFF;\n  background-color: #2E3440;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgpeybvhqm .gt_stub_row_group {\n  color: #FFFFFF;\n  background-color: #2E3440;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#sgpeybvhqm .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#sgpeybvhqm .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#sgpeybvhqm .gt_summary_row {\n  color: #FFFFFF;\n  background-color: #2E3440;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgpeybvhqm .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#sgpeybvhqm .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_grand_summary_row {\n  color: #FFFFFF;\n  background-color: #2E3440;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgpeybvhqm .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#sgpeybvhqm .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_footnotes {\n  color: #FFFFFF;\n  background-color: #2E3440;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgpeybvhqm .gt_sourcenotes {\n  color: #FFFFFF;\n  background-color: #2E3440;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sgpeybvhqm .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sgpeybvhqm .gt_left {\n  text-align: left;\n}\n\n#sgpeybvhqm .gt_center {\n  text-align: center;\n}\n\n#sgpeybvhqm .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#sgpeybvhqm .gt_font_normal {\n  font-weight: normal;\n}\n\n#sgpeybvhqm .gt_font_bold {\n  font-weight: bold;\n}\n\n#sgpeybvhqm .gt_font_italic {\n  font-style: italic;\n}\n\n#sgpeybvhqm .gt_super {\n  font-size: 65%;\n}\n\n#sgpeybvhqm .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#sgpeybvhqm .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#sgpeybvhqm .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#sgpeybvhqm .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#sgpeybvhqm .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#sgpeybvhqm .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#sgpeybvhqm .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<div id=\"sgpeybvhqm\" class=\"reactable html-widget \" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"sgpeybvhqm\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Git Command\":[\"git init\",\". (dot)\",\"*\",\"git add\",\"git commit -m \\\"\\\" \",\"git clone\",\"git pull\",\"git push\",\"git branch\",\"git merge\",\"git restore\",\"git log\",\"git shortlog -n -s -- folder\",\"git cat-file -p\"],\"Function\":[\"Creates a new repository with all necessary files\",\"Matches anything, can be used to add, delete, restore all files\",\"Add all files in current working directory except those beginning with a . (dot)\",\"add files\",\"Snapshot currently stages changes, within the quotes it is good practice to put a clear/meaningful message\",\"Point to an existing repo and make a copy in a new/different location\",\"Combination of fetch and merge, pulls all changes from a remote repository into the current branch\",\"Publish changes\",\"Create a separate version of the main repository\",\"Incorporate changes i.e. from a branch you've been working on\",\"Restore one or more files\",\"View the history of commits for a repository\",\"Number of commits per contributor for a folder\",\"Get details of a file, e.g. tree, parent, author,committer\"]},\"columns\":[{\"id\":\"Git Command\",\"name\":\"Git Command\",\"type\":\"character\",\"style\":\"function(rowInfo, colInfo) {\\nconst rowIndex = rowInfo.index + 1\\n}\",\"cell\":[\"git init\",\". (dot)\",\"*\",\"git add\",\"git commit -m \\\"\\\" \",\"git clone\",\"git pull\",\"git push\",\"git branch\",\"git merge\",\"git restore\",\"git log\",\"git shortlog -n -s -- folder\",\"git cat-file -p\"],\"html\":true,\"align\":\"left\",\"headerStyle\":{\"font-weight\":\"normal\"}},{\"id\":\"Function\",\"name\":\"Function\",\"type\":\"character\",\"style\":\"function(rowInfo, colInfo) {\\nconst rowIndex = rowInfo.index + 1\\n}\",\"cell\":[\"Creates a new repository with all necessary files\",\"Matches anything, can be used to add, delete, restore all files\",\"Add all files in current working directory except those beginning with a . (dot)\",\"add files\",\"Snapshot currently stages changes, within the quotes it is good practice to put a clear/meaningful message\",\"Point to an existing repo and make a copy in a new/different location\",\"Combination of fetch and merge, pulls all changes from a remote repository into the current branch\",\"Publish changes\",\"Create a separate version of the main repository\",\"Incorporate changes i.e. from a branch you've been working on\",\"Restore one or more files\",\"View the history of commits for a repository\",\"Number of commits per contributor for a folder\",\"Get details of a file, e.g. tree, parent, author,committer\"],\"html\":true,\"align\":\"left\",\"headerStyle\":{\"font-weight\":\"normal\"}}],\"searchable\":true,\"defaultPageSize\":10,\"showPageSizeOptions\":false,\"pageSizeOptions\":[10,25,50,100],\"paginationType\":\"numbers\",\"showPagination\":true,\"showPageInfo\":true,\"minRows\":1,\"showSortable\":true,\"height\":\"auto\",\"theme\":{\"color\":\"#bdc4ca\",\"backgroundColor\":\"#2e3440\",\"stripedColor\":\"rgba(128,128,128,0.05)\",\"style\":{\"fontFamily\":\"system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif\"},\"headerStyle\":{\"borderTopStyle\":\"solid\",\"borderTopWidth\":\"2px\",\"borderTopColor\":\"#D3D3D3\",\"borderBottomStyle\":\"solid\",\"borderBottomWidth\":\"2px\",\"borderBottomColor\":\"#D3D3D3\"}},\"elementId\":\"sgpeybvhqm\",\"dataKey\":\"4ae9ad48e6a2ebccf672b73c5d14d633\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[\"tag.attribs.columns.0.style\",\"tag.attribs.columns.1.style\"],\"jsHooks\":[]}</script>\n</div>\n```\n\n:::\n:::\n\n\n\n\n## More Detail:\n\n### Init\n\nGit init creates a repository in the current working directory. It is used when you're starting a project that is not currently using git. Each project will have a .git folder in the root directory and the project repository. Git will begin to track all files using a Secure Hash Algorithm (SHA) and those files/folders which you do not want tracked will exist in the .gitignore file.\n\nIn essence, you create an 'empty' book.\n\n\n\n\n```{mermaid}\ngitGraph\n  commit id: \"Initialise Project\"\n\n```\n\n\n\n\n### Add\n\nAnother eponymous function name. It is used for adding files. Since Git 2.0 there has been some changes:\n\n<br>\n\n::: {.callout-important .card .text-white .bg-secondary .mb-3 appearance=\"minimal\"}\n### Git 2.0 Changes\n\n[Changes found here](https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/RelNotes/2.0.0.txt)\n\nWhen \"git add -u\" and \"git add -A\" are run inside a subdirectory without specifying which paths to add on the command line, they operate on the entire tree for consistency with \"git commit -a\" and other commands (these commands used to operate only on the current subdirectory). Say \"git add -u .\" or \"git add -A .\" if you want to limit the operation to the current directory.\n\n\"git add <path>\" is the same as \"git add -A <path>\" now, so that \"git add dir/\" will notice paths you removed from the directory and record the removal. In older versions of Git, \"git add <path>\" used to ignore removals. You can say \"git add --ignore-removal <path>\" to add only added or modified paths in <path>, if you really want to.\n:::\n\n<br>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add -A # Stage all new, modified and deleted files\ngit add . # As of Git 2.0, git add . = git add -A\ngit add -u # Stage modified and deleted files\ngit add --ignore-removal # Stage new/modified files\n```\n:::\n\n\n\n\n`git add .` will expand to the current directory whereas `git add *` triggers file globbing, expanding to all files and directories that do not start with a dot (I know...slightly confusing). Running `git add .` from a sub-folder will update the index for files in that folder and subfolders recursively whereas `git add .`/`git add-A` will add all files in the working tree.\n\nFollowing the book analogy, I can think of it as saying 'I should start to include some pages I have written in this book'.\n\n### Commit\n\nSaves a snapshot of your repository. Git messages are a way to communicate the changes that have been made as well as *why*. You need to include sufficient information in your commit messages. There's many passionate devs arguing the length of commit messages and despise the use of `-m`.\n\nThere's the viewpoint of the need for massive messages as a sign of you're not committing enough, it should be succinct so that people don't just gloss over it. On the other hand, if you're taking over a new project, come back from a long holiday or just generally made significant changes whether that is adding a new feature/fixing a bug and needs a sufficient explanation of *what* and *why,* you'll want longer messages.\n\nI lean towards advocating the longer, more detailed messages. I would rather be completely explicit and slightly overkill than to provide next to no detail.\n\n<br>\n\nThere is a nice project for generating pretty changelogs [here](https://github.com/frinyvonnick/gitmoji-changelog).\n\n<br>\n\nFor a few files you can use:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add file file2 \ngit commit -m\"Adding file and file2\" # Specify message for commit\n```\n:::\n\n\n\n\nOr for many:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit add .\ngit commit -m\"Multiple changes\"\n```\n:::\n\n\n\n\n<br>\n\n'I'm content with what is written in the book for now, I'll create a save point, logging what is done, signed with the date, time and author.'\n\n\n\n\n```{mermaid}\ngitGraph\n  commit id: \"Initialise\"\n  commit id: \"Commit\"\n\n```\n\n\n\n\n### Push\n\n`git push` is commonly used when you're using GitHub. You'll want to commit your changes and then push/upload files from your local repository to GitHub.\n\nThe book is looking pretty good, I'll send the latest version to a librarian for safe keeping.\n\n### Clone\n\n`git clone` quite literally creates a local duplicate with everything from some specified repository.\n\nE.g. 'I'll ask the librarian for a copy of my book or get someone to send a copy from my study to my new location.'\n\n### Branch\n\nIf you do not want to risk impacting the main codebase, it can be a good idea to work from a branch if you are working on some new feature or bug. After working on a branch, you can then `merge` these changes back into main.\n\nI think I'll create a separate copy of the book to write some chapters and make edits. Later, I might merge the two copies.\n\n\n\n\n```{mermaid}\ngitGraph\n  commit id: \"Initialise\"\n  commit id: \"Just\"\n  commit id: \"Keep\"\n  commit id: \"Committing\"\n  commit id: \"one more...\"\n  branch feat\n  checkout feat\n  commit\n\n```\n\n\n\n\n### Checkout\n\nHere I commit on my branch 'feat' and then use checkout to go back to main. I can then create another branch 'bug' from main, do some commits, and switch back to main again. The checkout function allows you to swap between the different branches.\n\n\n\n\n```{mermaid}\n\ngitGraph\n  commit id: \"Initialise\"\n  commit id: \"Just\"\n  commit id: \"Keep\"\n  commit id: \"Committing\"\n  commit id: \"one more...\"\n  branch feat\n  checkout feat\n  commit\n  commit\n  checkout main\n  commit\n  branch bug\n  checkout bug\n  commit\n  commit\n  checkout main\n  commit\n\n```\n\n\n\n\nI want to swap between the different copies of this book I am working on.\n\n### Restore\n\nThis is a mess, I need to start from my last saved version. I'll contact the library to get the last version of the book they have.\n\n\n\n\n```{mermaid}\ngitGraph\n  commit id: \"Initialise\"\n  commit id: \"Just\"\n  commit id: \"Keep\"\n  commit id: \"Committing\"\n  commit id: \"one more...\"\n  branch feat\n  checkout feat\n  commit\n  commit\n  checkout main\n  commit\n  branch bug\n  checkout bug\n  commit\n  commit\n```\n\n\n\n\n### Merge\n\nI want to incorporate my changes from this other book into my main book.\n\n\n\n\n```{mermaid}\ngitGraph\n  commit id: \"Initialise\"\n  commit id: \"Just\"\n  commit id: \"Keep\"\n  commit id: \"Committing\"\n  commit id: \"one more...\"\n  branch feat\n  checkout feat\n  commit\n  commit\n  checkout main\n  commit\n  branch bug\n  checkout bug\n  commit\n  commit\n  checkout main\n  commit\n  merge bug\n  checkout feat\n  commit\n\n```\n\n\n\n\n### Fetch\n\nI need to get my book with all branches, tags, commits, etc from the library into my study.\n\n### Pull\n\nA combination of fetch and merge.\n\n# Using git in RStudio\n\nFirst, make sure that you have version control enabled and that R can find git.\n\nAt the top of RStudio, go to Tools then global options. At the left-hand side towards the bottom there is Git/SVN. Click the tick-box 'Enable version control interface for RStudio projects'. Under Git executable, make sure it has the correct location where git.exe is stored.\n\n![](global_find_git.mp4)\n\n## Initialising git repository through RStudio\n\n![](version_control_rsui.mp4)\n\n## Example of using git in RStudio\n\nI have included below a small example using a few key commands from git:\n\n-   `git init` initialise a git repository\n-   `git config user.name` define the user name (you can also use `git config --local` to see details)\n-   `git config user.email` define email\n-   `git add .` add everything in the working directory\n-   `git commit -m\"Text\"` git commit with message `Text`\n-   `git log` see the log produced from git (You can see the author, date/time, commits, etc.)\n\n![](git_example.mp4)\n\n## How do I view user name / email / settings in git?\n\nGlobal Settings and Details:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Global level settings (including details of user name/email)\ngit config --list\n```\n:::\n\n\n\n\nLocally/Repository Settings and Details:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Local/Repository level settings (including details of user name/email)\ngit config --list --local \n```\n:::\n\n\n\n\n## How do I configure user name / email in git?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change global user name\ngit config --global user.name \"user_name\"\n# Change global user email\ngit config --global user.email \"user@email.com\"\n# Change local user name\ngit config --local user.name \"user_name\"\n# Change local user email\ngit config --local user.email \"user@email.com\"\n```\n:::\n\n\n\n\n## How do I see the number of commits per contributor for files?\n\n-   -s number of commits per contributor\n-   -n sort by number of commits descending\n-   -- useful for commands such as log/checkout where you want to be clear whether you're indicating a reference to a revision or a path\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit shortlog -n -s -- folder # \n```\n:::\n\n\n\n\n![](imgs/git%20show_auth.PNG){fig-align=\"center\"}\n\n## How do I get the hash and details of the current commit?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit rev-parse HEAD\ngit rev-parse --short HEAD # Short version\ngit cat-file -p # Followed by the hash\n```\n:::\n\n\n\n\n![](imgs/git_commit_details.PNG){fig-align=\"center\" width=\"816\"}\n\n# Setting up your R project and Libraries with git\n\n## Initialise\n\nI should acknowledge, this is how to set up a project **without** using [renv](https://rstudio.github.io/renv/articles/renv.html). For those unfamiliar with `renv` it is a package used to create reproducible environments. You can take various snapshots of your project library, updating/staging the, with the ability to roll-back. I will do another post for `renv` at a later date.\n\nIn RStudio, go to file, new project and create an R project file in the folder you wish to version control.\n\nNow, add an empty folder called 'library'. The idea is, instead of using the packages installed on the machine, we will be pointing to this library folder for all our packages. This will give us more control over each project and avoid the issue of if I update this package on the local machine, affecting all the projects and potentially breaking them (which is very incredibly frustrating).\n\nTo tell R to point to this library, create a new text file in the folder called '.Rprofile'. Within the text file add:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.libPaths(\"library\")\n```\n:::\n\n\n\n\nIt should look something like this.\n\n![An example project folder with an rprofile pointing to the folder called library](imgs/rprof.PNG){fig-align=\"center\" width=\"745\"}\n\nYou may have to reload your Rproject for the profile to take effect in this next step. Next, install some packages. For example,\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages <-\n  c(\n    \"magrittr\",\n    \"dplyr\",\n    \"tidyr\",\n    \"ggplot2\",\n    \"dplyr\",\n    \"lubridate\",\n    \"RODBC\",\n    \"data.table\",\n    \"stringr\",\n    \"grid\",\n    \"gridExtra\"\n  )\n\nif (length(packages[!(packages %in% installed.packages()[, \"Package\"])]))\n  install.packages(packages[!(packages %in% installed.packages()[, \"Package\"])]\n  )\n# Load packages\n#lapply(packages, library, character.only = TRUE)\n```\n:::\n\n\n\n\nThese packages should now be in the library folder like so:\n\n![An example project folder with an rprofile pointing to the folder called library](imgs/library.PNG){fig-align=\"center\" width=\"745\"}\n\nTo initialise git for enabling version control and adding files/commit, in the terminal in RStudio type:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit init # Initialise the project on the current working directory\ngit add * # Add all files in current working directory except those beginning with a . (dot)\n\n# Optional configuration for user.name and email\ngit config --local user.name username\ngit config --local user.email username@snailmail.com\n\n# Commit with message\ngit commit -m\"Initial DSMB Statistical Report XXXX\" #Change the text in quotes to whatever you like\n```\n:::\n\n\n\n\n## Subsequent staging\n\nIf you are producing a DSMB, TSC, etc report and you set up your folders to be called 'MM YYYY'. On the next iteration of the report, copy the folder and changing the name of the folder. Delete the .git and R project files. Next, follow the previous steps but with a new commit message:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit init # Initialise the project on the current working directory\ngit add * # Add all files in current working directory except those beginning with a . (dot)\n  \n# Commit with message\ngit commit -m\"Subsequent changes...DSMB Statistical Report XXXX\" #Change the text in quotes to whatever you like\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}